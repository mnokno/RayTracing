// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;
float2 _PixelOffset;
float4 _DirectionalLight;

struct Ray
{
    float3 orgine;
    float3 direction;
	float3 energy;
};

struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
};

Ray CreateRay(float3 orgine, float3 direction)
{
	Ray ray;
	ray.orgine = orgine;
	ray.direction = direction;
	ray.energy = float3(1.0f, 1.0f, 1.0f);
	return ray;
}

RayHit CreateRayHit()
{
	RayHit hit;
	hit.position = float3(0.0f, 0.0f, 0.0f);
	hit.distance = 1.#INF;
	hit.normal = float3(0.0f, 0.0f, 0.0f);
	return hit;
}


void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
	// Calculates distance along the ray where the ground plane is intersected
	float t = -ray.orgine.y / ray.direction.y;
	if (t > 0 && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.orgine + t * ray.direction;
		bestHit.normal = float3(0.0f, 1.0f, 0.0f);
	}
}




Ray CreateCameraRay(float2 uv)
{
    // Transforms the camera origin to world space
	float3 orgine = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    
    // Transform the direction from camera to world space and normalize
	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);
    
	return CreateRay(orgine, direction);
}

void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere)
{
	// Calculates distance along the ray where the sphere is intersected
	float3 d = ray.orgine - sphere.xyz;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
	if (p2sqr < 0)
		return;
	float p2 = sqrt(p2sqr);
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
	if (t > 0 && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.orgine + t * ray.direction;
		bestHit.normal = normalize(bestHit.position - sphere.xyz);
	}
}

RayHit Trace(Ray ray)
{
	RayHit bestHit = CreateRayHit();
	IntersectGroundPlane(ray, bestHit);
	for (int i = 0; i < 5; i++)
	{
		for (int j = 0; j < 5; j++)
		{
			IntersectSphere(ray, bestHit, float4(i*3, 2.0f, j*3, 1.0f));
		}
	}
	return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
	if (hit.distance < 1.#INF)
	{
		//float3 specular = float3(0.6f, 0.6f, 0.6f);
		//float3 albedo = float3(0.8f, 0.8f, 0.8f);
		float3 specular = float3(0.2f, 0.3f, 0.1f);
		float3 albedo = float3(0.8f, 0.8f, 0.8f);
		
		// Reflects the ray and multiply energy with specular reflection
		ray.orgine = hit.position + hit.normal + 0.001f;
		ray.direction = reflect(ray.direction, hit.normal);
		ray.energy *= specular;
		
		// Shadow test ray
		bool shadow = false;
		Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
		RayHit shadowHit = Trace(shadowRay);
		if (shadowHit.distance != 1.#INF)
		{
			return float3(0.0f, 0.0f, 0.0f);
		}
		
		// Return a diffuse-shaded color
		return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * albedo;
	}
	else
	{
		// Erase the ray's energy - the sky doesn't reflect anything
		ray.energy = 0.0f;
		
        // Sample the skybox and write it
		float theta = acos(ray.direction.y) / -PI;
		float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
		return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
	}
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
	uint width, height;
	Result.GetDimensions(width, height);
    
    // Transform pixel to [-1, 1] range
	float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);
    
    // Gets the ray for the UV's
	Ray ray = CreateCameraRay(uv);
    
	// Trace and shade
	float3 result = float3(0, 0, 0);
	for (int i = 0; i < 8; i++)
	{
		RayHit hit = Trace(ray);
		result += ray.energy * Shade(ray, hit);

		if (!any(ray.energy))
		{
			break;
		}
	}

	Result[id.xy] = float4(result, 1);
	}
